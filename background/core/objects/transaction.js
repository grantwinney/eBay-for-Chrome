/*!
 * Copyright (C) 2007-2015 eBay Inc. All Rights Reserved.
 */
function Transaction(aItemId, aTransactionId) {
    this._init(aItemId, aTransactionId);
}
Transaction.SCHEMA = {
    NAME: "Transaction",
    PROPERTIES: {
        "itemId": { type: "string", xml: "Item.ItemID" },
        "transactionId": { type: "string", xml: "TransactionID" },
        "creationTime": { type: "string", xml: "CreatedDate" },
        "quantityPurchased": { type: "number", xml: "QuantityPurchased" },
        "buyerUserId": { type: "string", xml: "Buyer.UserID" },
        "isPaidFor": { type: "boolean", xml: "" },
        "isShipped": { type: "boolean", xml: "" },
        "isRefunded": { type: "boolean", xml: "" },
        "feedbackLeftType": { type: "string", xml: "FeedbackLeft.CommentType" },
        "feedbackReceivedType": { type: "string", xml: "FeedbackReceived.CommentType" },
        "transactionPrice": { type: "number", xml: "TransactionPrice|TotalTransactionPrice|Item.SellingStatus.CurrentPrice" },
        "transactionPriceCurrency": { type: "string", xml: "TransactionPrice.@currencyID|TotalTransactionPrice.@currencyID|Item.SellingStatus.CurrentPrice.@currencyID" },
        "convertedTransactionPrice": { type: "number", xml: "ConvertedTransactionPrice" },
        "convertedTransactionPriceCurrency": { type: "string", xml: "ConvertedTransactionPrice.@currencyID" }
    }
};
Transaction.TYPES = {
    BUYING: "Buying",
    SELLING: "Selling"
};
Transaction.prototype = {
    name: Transaction.SCHEMA.NAME,
    _init: function (aItemId, aTransactionId) {
        this.set("itemId", aItemId);
        this.set("transactionId", aTransactionId);
    },
    get: function (aProperty) {
        return this["_" + aProperty];
    },
    set: function (aProperty, aValue) {
        var type = Transaction.SCHEMA.PROPERTIES[aProperty].type;
        aValue = ObjectHelper.getTypedValue(type, aValue);
        this["_" + aProperty] = aValue;
    },
    updateTo: function (aNewObject) {
        return ObjectHelper.updateTo(this, aNewObject, Transaction.SCHEMA);
    },
    updateWithJSON: function (aJSON) {
        ObjectHelper.updateWithJSON(this, aJSON, Transaction.SCHEMA);
    },
    copy: function () {
        return ObjectHelper.copyObject(this, Transaction);
    },
    fromXML: function (aXmlNode, aExclusivePrefix, aTransactionType) {
        var account;
        var buyerUserId;
        var paidStatus;
        var transaction = ObjectHelper.fromXML(aXmlNode, Transaction, aExclusivePrefix);
        this.updateTo(transaction);
        if (this.get("creationTime")) {
            this.set("creationTime", UtilityHelper.dateFromIso8601(this.get("creationTime")).getTime());
        }
        switch (aTransactionType) {
            case Transaction.TYPES.BUYING:
                account = Account.getAccount();
                buyerUserId = account.get("userId") || "";
                this.set("buyerUserId", buyerUserId);
                switch ($(aXmlNode).find("BuyerPaidStatus").text()) {
                    case "MarkedAsPaid":
                    case "PaidWithEscrow":
                    case "PaidWithPaisapay":
                    case "PaidWithPaisaPayEscrow":
                    case "PaidWithPayPal":
                        paidStatus = true;
                        break;
                    default:
                        paidStatus = false;
                }
                this.set("isPaidFor", paidStatus);
                break;
            case Transaction.TYPES.SELLING:
                buyerUserId = $(aXmlNode).find("Buyer").find("UserID").text();
                this.set("buyerUserId", buyerUserId);
                var refunded = false;
                switch ($(aXmlNode).find("SellerPaidStatus").text()) {
                    case "MarkedAsPaid":
                    case "PaidWithEscrow":
                    case "PaidWithPaisapay":
                    case "PaidWithPaisaPayEscrow":
                    case "PaidWithPayPal":
                        paidStatus = true;
                        break;
                    case "Refunded":
                        paidStatus = true;
                        refunded = true;
                        break;
                    default:
                        paidStatus = false;
                }
                this.set("isPaidFor", paidStatus);
                this.set("isRefunded", refunded);
                break;
        }
        var isShipped = $(aXmlNode).find("ShippedTime").text().length > 0;
        this.set("isShipped", isShipped);
    }
};
//# sourceMappingURL=data:application/json;base64,