/*!
 * Copyright (C) 2007-2015 eBay Inc. All Rights Reserved.
 */
var MEDSApi = {
    addRecentSearch: function (aHomeSite, aParameters, aCallback) {
        var that = this;
        var callback = function (aResponse) {
            var result = null;
            if (aResponse) {
                result = that._parseResponse(aResponse);
            }
            if (aCallback) {
                aCallback(result);
            }
        };
        var request = this._doCall("addRecentSearch", aHomeSite, aParameters, callback);
        return request;
    },
    getRecentSearches: function (aHomeSite, aParameters, aCallback) {
        var that = this;
        var callback = function (aResponse) {
            var result = null;
            if (aResponse) {
                result = that._parseResponse(aResponse);
            }
            if (aCallback) {
                aCallback(result);
            }
        };
        var request = this._doCall("getRecentSearches", aHomeSite, aParameters, callback);
        return request;
    },
    clearRecentSearches: function (aHomeSite, aParameters, aCallback) {
        var that = this;
        var callback = function (aResponse) {
            var result = null;
            if (aResponse) {
                result = that._parseResponse(aResponse);
            }
            if (aCallback) {
                aCallback(result);
            }
        };
        var request = this._doCall("clearRecentSearches", aHomeSite, aParameters, callback);
        return request;
    },
    _parseResponse: function (aResponse) {
        return aResponse;
    },
    _validateResponse: function (aResponse) {
        if (!aResponse) {
            Logger.error("MEDSApi Error: no response!");
            return false;
        }
        return true;
    },
    _checkTokenExpired: function (aXHR) {
        if ((aXHR.status && aXHR.status.toString() == "401") ||
            (aXHR.statusText && aXHR.statusText == "Unauthorized")) {
            ObserverHelper.notify(Topics.USER_TOKEN_EXPIRED, null);
            return true;
        }
        return false;
    },
    _checkDataNoFound: function (aXHR) {
        if ((aXHR.status && aXHR.status.toString() == "404") ||
            (aXHR.statusText && aXHR.statusText == "Not Found")) {
            return true;
        }
        return false;
    },
    _doCall: function (aRequestName, aHomeSite, aParameters, aCallback) {
        var that = this;
        var request;
        var requestType;
        var parametersString;
        var urlParametersString = "?action=prepend";
        var siteId = Site.siteIdForSite(aHomeSite);
        var url = ApiHelper.getEndPoint("medsApi");
        var account = Account.getAccount();
        url = url.replace("{IdentityType}", "User");
        url = url.replace("{IdentityProvider}", "Marketplace");
        var params = {
            deviceId: "AQABgvmuZpi4DhtLQU4ua8GEPQZU+0cwjE6WycazSDBcMHVk63SfnYpZ1OkyqEfSb11l",
            deviceIdSource: "4PP",
            appVersion: "3.3.0"
        };
        switch (aRequestName) {
            case "addRecentSearch":
                requestType = "POST";
                url += urlParametersString;
                parametersString = aParameters;
                break;
            case "clearRecentSearches":
                requestType = "DELETE";
                break;
            case "getRecentSearches":
            default:
                requestType = "GET";
                break;
        }
        request =
            $.ajax({
                beforeSend: function (aXHR) {
                    aXHR.setRequestHeader("Content", "application/json");
                    aXHR.setRequestHeader("Accept", "application/json");
                    aXHR.setRequestHeader("X-EBAY-C-MARKETPLACE-ID", siteId);
                    aXHR.setRequestHeader("X-EBAY-C-IDENTITY", "id=123;idp=456");
                    aXHR.setRequestHeader("X-EBAY-C-ENDUSERCTX", "deviceId=" + params.deviceId +
                        ",deviceIdSource=" + params.deviceIdSource +
                        ",appVersion=" + params.appVersion);
                    aXHR.setRequestHeader("If-Modified-Since", "");
                    if (account) {
                        var token = account.get("token");
                        if (token) {
                            aXHR.setRequestHeader("Authorization", "IAF " + token);
                        }
                    }
                },
                url: url,
                data: parametersString,
                dataType: "json",
                type: requestType,
                contentType: "application/json",
                jsonp: false,
                timeout: PropertyDAO.get(PropertyDAO.PROP_API_TIMEOUT),
                success: function (aData, aTextStatus) {
                    try {
                        if (!that._validateResponse(aData)) {
                            aData = null;
                        }
                        else {
                            MessagePanelService.dismissMessage(MessagePanelService.TYPE.CONNECT_ERROR);
                        }
                        if (aCallback) {
                            aCallback(aData);
                        }
                    }
                    catch (e) {
                        UtilityHelper.handleError("MEDSApi", aRequestName, e.message, aCallback);
                    }
                },
                error: function (aXHR, aTextStatus, aError) {
                    MEDSApi._checkTokenExpired(aXHR);
                    MEDSApi._checkDataNoFound(aXHR);
                    UtilityHelper.handleError("MEDSApi", aRequestName, aXHR.responseText, aCallback);
                }
            });
        ApiHelper.addPendingRequest(request, aRequestName, Topics.RECENT_SEARCHES_UPDATED);
        return request;
    }
};
//# sourceMappingURL=data:application/json;base64,