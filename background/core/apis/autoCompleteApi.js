/*!
 * Copyright (C) 2007-2015 eBay Inc. All Rights Reserved.
 */
var AutoCompleteApi = {
    getData: function (aKeyword, aSiteId, aCallback) {
        var that = this;
        var request;
        var localCallback = function (aResponse) {
            if (aCallback) {
                response = that._parseGetData(aResponse);
                aCallback(response);
            }
        };
        request = this._doCall(aKeyword, aSiteId, localCallback);
        return request;
    },
    _parseGetData: function (aResponse) {
        var response = {};
        if (aResponse && "prefix" in aResponse) {
            response.keyword = aResponse.prefix;
            if ("res" in aResponse) {
                response.suggestions = aResponse.res.sug;
                response.categories = aResponse.res.categories;
            }
        }
        return response;
    },
    _processResponse: function (aData) {
        var response;
        var result;
        if (aData && aData.match(/^\/\*\*\/\((.*)\)$/)) {
            result = aData.match(/^\/\*\*\/\((.*)\)$/);
            if (result && result.length > 1) {
                response = JSON.parse(result[1]);
            }
        }
        return response;
    },
    _validateResponse: function (aResponse) {
        if (!aResponse) {
            Logger.error("AutoComplete API error (no response document!)");
            return false;
        }
        var node = $(aResponse).find("prefix");
        if (!node) {
            Logger.error("AutoComplete API error (no Prefix node!)");
            return false;
        }
        return true;
    },
    _doCall: function (aKeyword, aSiteId, aCallback) {
        var that = this;
        var parameterString;
        var request;
        var requestName = "GetAutoComplete";
        parameterString = "kwd=" + aKeyword;
        parameterString += "&sId=" + aSiteId;
        parameterString += "&_cb=\"\"";
        request =
            $.ajax({
                contentType: "application/json",
                url: ApiHelper.getEndPoint("autoCompleteApi"),
                data: parameterString,
                dataType: "text",
                jsonp: false,
                timeout: PropertyDAO.get(PropertyDAO.PROP_API_TIMEOUT),
                success: function (aData, aTextStatus) {
                    try {
                        if (aTextStatus && aTextStatus == "success") {
                            var data = that._processResponse(aData);
                            if (!that._validateResponse(data)) {
                                data = null;
                            }
                            else {
                                MessagePanelService.dismissMessage(MessagePanelService.TYPE.CONNECT_ERROR);
                            }
                            if (aCallback) {
                                aCallback(data);
                            }
                        }
                    }
                    catch (e) {
                        UtilityHelper.handleError("AutoCompleteApi", requestName, e.message, aCallback);
                    }
                },
                error: function (aXHR, aTextStatus, aError) {
                    UtilityHelper.handleError("AutoCompleteApi", requestName, aXHR.responseText, aCallback);
                }
            });
        ApiHelper.addPendingRequest(request, requestName);
        return request;
    }
};
//# sourceMappingURL=data:application/json;base64,