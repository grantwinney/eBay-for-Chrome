/*!
 * Copyright (C) 2007-2015 eBay Inc. All Rights Reserved.
 */
var SymbanApi = {
    REQUEST_TYPES: {
        PUBLISH: "publish",
        PULL: "pull",
        UPDATE: "update"
    },
    UPDATES: {
        READ: 1,
        READ_ALL: 2,
        DELETE: 3,
        DELETE_ALL: 4
    },
    callSymbanApi: function (aRequestName, aParameters, aCallback) {
        var initialTimestamp = $.now();
        var finalTimestamp = 0;
        var elapsedTime = 0;
        var callback = function (aResponse) {
            var result = null;
            finalTimestamp = $.now();
            elapsedTime = (finalTimestamp - initialTimestamp) / 1000;
            if (PropertyDAO.get(PropertyDAO.PROP_DISPLAY_LOGS)) {
                console.log("Response Symban", aResponse);
                console.log("elapsed time (in seconds): " + elapsedTime);
                console.log("--- end response Symban ---\n");
            }
            if (aResponse) {
                result = aResponse;
            }
            if (aCallback) {
                aCallback(result);
            }
        };
        request = this._doCall(aRequestName, aParameters, callback);
        return request;
    },
    _validateResponse: function (aResponse) {
        if (!aResponse) {
            Logger.error("SymbanApi Error: no response!");
            return false;
        }
        if (aResponse.errorMessage && aResponse.errorMessage.error) {
            $.each(aResponse.errorMessage.error, function () {
                Logger.error("SymbanApi Error: " + this.errorId + " - " + this.longMessage);
            });
        }
        return true;
    },
    _flattenParameters: function (aParameters) {
        var unflattened = [];
        var parameterString = "";
        $.each(aParameters, function (aName, aValue) {
            unflattened.push({ name: aName, value: aValue });
        });
        while (unflattened.length > 0) {
            var entry = unflattened.shift();
            if (typeof (entry.value) != "object") {
                parameterString += "&" + entry.name +
                    "=" + encodeURIComponent(entry.value);
            }
            else {
                if ($.isArray(entry.value)) {
                    $.each(entry.value, function (aIndex, aNewEntryValue) {
                        var newEntry = {};
                        newEntry.name = entry.name + "(" + aIndex + ")";
                        newEntry.value = aNewEntryValue;
                        unflattened.splice(aIndex, 0, newEntry);
                    });
                }
                else {
                    var i = 0;
                    $.each(entry.value, function (aNewEntryName, aNewEntryValue) {
                        var newEntry = {};
                        newEntry.name = entry.name + "." + aNewEntryName;
                        newEntry.value = aNewEntryValue;
                        unflattened.splice(i++, 0, newEntry);
                    });
                }
            }
        }
        return parameterString;
    },
    _createPutParametersString: function (aParameters) {
        var params;
        var type = aParameters.type;
        switch (type) {
            case this.UPDATES.READ:
                params = {
                    notification: [
                        {
                            notificationId: aParameters.notificationId,
                            status: "READ"
                        }
                    ]
                };
                break;
            case this.UPDATES.READ_ALL:
                params = {
                    extension: [],
                    notification: [],
                    markAllRead: true
                };
                break;
            case this.UPDATES.DELETE:
                params = {
                    notification: [
                        {
                            notificationId: aParameters.notificationId,
                            status: "DELETED"
                        }
                    ]
                };
                break;
            case this.UPDATES.DELETE_ALL:
                params = {
                    extension: [],
                    notification: [],
                    markAllDelete: true
                };
                break;
        }
        params.lastRetrievalTime = aParameters.lastRetrievalTime;
        return JSON.stringify(params);
    },
    _checkTokenExpired: function (aXHR) {
        if (aXHR && aXHR.responseJSON) {
            if ((aXHR.responseJSON.errorMessage &&
                aXHR.responseJSON.errorMessage.error[0] &&
                aXHR.responseJSON.errorMessage.error[0].errorId &&
                aXHR.responseJSON.errorMessage.error[0].errorId.toString() == "1001") ||
                (aXHR.responseJSON.error_code &&
                    aXHR.responseJSON.error_code == "invalid_token")) {
                ObserverHelper.notify(Topics.USER_TOKEN_EXPIRED, null);
            }
        }
    },
    _doCall: function (aRequestName, aParameters, aCallback) {
        var url = ApiHelper.getEndPoint("symbanApi");
        var that = this;
        var account = Account.getAccount();
        var parameterString;
        var request;
        var requestType;
        switch (aRequestName) {
            case SymbanApi.REQUEST_TYPES.PUBLISH:
                requestType = "POST";
                parameterString = this._flattenParameters(aParameters);
                break;
            case SymbanApi.REQUEST_TYPES.UPDATE:
                requestType = "PUT";
                parameterString = this._createPutParametersString(aParameters);
                break;
            case SymbanApi.REQUEST_TYPES.PULL:
            default:
                requestType = "GET";
                if (aParameters && "apiPath" in aParameters) {
                    var arr = url.split("/");
                    url = arr[0] + "//" + arr[2] + aParameters.apiPath;
                    delete aParameters.apiPath;
                }
                parameterString = this._flattenParameters(aParameters);
                break;
        }
        request =
            $.ajax({
                beforeSend: function (aXHR) {
                    aXHR.setRequestHeader("Content-Type", "application/json");
                    aXHR.setRequestHeader("Accept", "application/json");
                    aXHR.setRequestHeader("Accept-Language", UtilityHelper.getBrowserLanguage());
                    if (account && account.get("token")) {
                        aXHR.setRequestHeader("Authorization", "bearer " + account.get("token"));
                    }
                },
                type: requestType,
                url: url,
                data: parameterString,
                dataType: "json",
                jsonp: false,
                timeout: PropertyDAO.get(PropertyDAO.PROP_API_TIMEOUT),
                success: function (aData, aTextStatus) {
                    try {
                        if (!that._validateResponse(aData)) {
                            aData = null;
                        }
                        else {
                            MessagePanelService.dismissMessage(MessagePanelService.TYPE.CONNECT_ERROR);
                        }
                        if (aCallback) {
                            aCallback(aData);
                        }
                    }
                    catch (e) {
                        UtilityHelper.handleError("SymbanApi", aRequestName, e.message, aCallback);
                    }
                },
                error: function (aXHR, aTextStatus, aError) {
                    SymbanApi._checkTokenExpired(aXHR);
                    UtilityHelper.handleError("SymbanApi", aRequestName, aXHR.responseText, aCallback);
                }
            });
        ApiHelper.addPendingRequest(request, aRequestName, Topics.SYMBAN_DATA_UPDATED);
        return request;
    }
};
//# sourceMappingURL=data:application/json;base64,