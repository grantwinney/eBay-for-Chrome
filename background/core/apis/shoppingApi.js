/*!
 * Copyright (C) 2007-2015 eBay Inc. All Rights Reserved.
 */
var ShoppingApi = {
    _IGNORABLE_ERRORS: ["10.20", "10.85", "10.12", "10.15"],
    getUserProfile: function (activeAccount, aUserId, aSiteId, aCallback) {
        if (!activeAccount) {
            Logger.fatal("Attempt to make Shopping API GetUserProfile call when " +
                "no account is active.");
            return;
        }
        var that = this;
        var innerBody;
        var wrappedBody;
        var localCallback;
        var request;
        innerBody = "<IncludeSelector>Details</IncludeSelector>" +
            "<UserID>" + aUserId + "</UserID>";
        wrappedBody = this._wrapCall("GetUserProfile", innerBody);
        localCallback = function (aResponse) {
            if (aCallback) {
                var result = that._parseGetUserProfile(aResponse);
                aCallback(result);
            }
        };
        request = this._doCall(wrappedBody, aSiteId, localCallback);
        return request;
    },
    _parseGetUserProfile: function (aResponse) {
        var result = {};
        if (!aResponse) {
            result.errors = true;
        }
        else {
            var xml = $(aResponse);
            result.feedbackRating = xml.find("FeedbackScore").text();
            result.registrationSite = xml.find("RegistrationSite").text();
            result.positiveFeedbackPercent = xml.find("PositiveFeedbackPercent").text();
            result.feedbackRatingStar = xml.find("FeedbackRatingStar").text();
            result.myWorldLargeImage = xml.find("MyWorldLargeImage").text();
            result.myWorldSmallImage = xml.find("MyWorldSmallImage").text();
        }
        return result;
    },
    _validateResponse: function (aResponse) {
        if (!aResponse) {
            Logger.error("ShoppingApi Error: no response document!");
            return false;
        }
        var node = $(aResponse).find("Ack");
        if (!node) {
            Logger.error("ShoppingApi Error: no Ack node!");
            return false;
        }
        if ($(node).text() != "Success") {
            var errors = $(aResponse).find("Errors");
            $.each(errors, function (aIndex, aError) {
                var severityCode = $(aError).find("SeverityCode");
                if ($(severityCode).text() == "Warning") {
                    Logger.warn("ShoppingApi Warning: " + $(aError).find("ShortMessage").text());
                }
                else {
                    var errorCode = $(aError).find("ErrorCode").text();
                    var isIgnored = $.inArray(errorCode, this._IGNORABLE_ERRORS) == -1;
                    if (!isIgnored) {
                        Logger.error("ShoppingApi Error: " + $(aError).find("ShortMessage").text());
                        var responseName = "";
                        try {
                            responseName = $(aResponse).children(":first").prop("tagName");
                            /(.*)Response/.exec(responseName)[1];
                        }
                        catch (e) { }
                    }
                }
            });
        }
        return true;
    },
    _wrapCall: function (aCallName, aInnerBody) {
        var wrappedBody = '<?xml version="1.0" encoding="utf-8"?>' +
            '<' + aCallName + 'Request xmlns="urn:ebay:apis:eBLBaseComponents">' +
            aInnerBody +
            '</' + aCallName + 'Request>';
        return wrappedBody;
    },
    _doCall: function (aBody, aSiteId, aCallback) {
        var that = this;
        var requestName;
        try {
            requestName = /><(.*?)Request/.exec(aBody)[1];
        }
        catch (e) {
            Logger.fatal("Shopping API request will not be sent, as it is " +
                "badly-formed.");
            return;
        }
        var request = $.ajax({
            beforeSend: function (aXHR) {
                aXHR.setRequestHeader("X-EBAY-API-CALL-NAME", requestName);
                aXHR.setRequestHeader("X-EBAY-API-APP-ID", ApiHelper.getEndPoint("clientId"));
                aXHR.setRequestHeader("X-EBAY-API-VERSION", Configs.SHOPPING_API_VERSION);
                aXHR.setRequestHeader("X-EBAY-API-SITE-ID", aSiteId);
                aXHR.setRequestHeader("X-EBAY-API-REQUEST-ENCODING", "XML");
                aXHR.setRequestHeader("X-EBAY-API-RESPONSE-ENCODING", "XML");
                aXHR.setRequestHeader("X-EBAY-SIDEBAR-VERSION", BrowserHelper.getExtensionVersion());
            },
            type: "POST",
            contentType: "text/xml",
            url: ApiHelper.getEndPoint("shoppingApi"),
            data: aBody,
            jsonp: false,
            timeout: PropertyDAO.get(PropertyDAO.PROP_API_TIMEOUT),
            success: function (aData, aTextStatus) {
                try {
                    if (!that._validateResponse(aData)) {
                        aData = null;
                    }
                    else {
                        MessagePanelService.dismissMessage(MessagePanelService.TYPE.CONNECT_ERROR);
                    }
                    if (aCallback) {
                        aCallback(aData);
                    }
                }
                catch (e) {
                    UtilityHelper.handleError("ShoppingApi", requestName, e.message, aCallback);
                }
            },
            error: function (aXHR, aTextStatus, aError) {
                UtilityHelper.handleError("ShoppingApi", requestName, aXHR.responseText, aCallback);
            }
        });
        ApiHelper.addPendingRequest(request, requestName);
        return request;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcHBpbmdBcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9iYWNrZ3JvdW5kL2NvcmUvYXBpcy9zaG9wcGluZ0FwaS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQWVILElBQUksV0FBVyxHQUFHO0lBQ2hCLGlCQUFpQixFQUFHLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDO0lBVXhELGNBQWMsRUFBRyxVQUFTLGFBQWEsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVM7UUFDbEUsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ25CLE1BQU0sQ0FBQyxLQUFLLENBQUMsd0RBQXdEO2dCQUN4RCx1QkFBdUIsQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sQ0FBQztRQUNULENBQUM7UUFFRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsSUFBSSxTQUFTLENBQUM7UUFDZCxJQUFJLFdBQVcsQ0FBQztRQUNoQixJQUFJLGFBQWEsQ0FBQztRQUNsQixJQUFJLE9BQU8sQ0FBQztRQUVaLFNBQVMsR0FBRyw0Q0FBNEM7WUFDNUMsVUFBVSxHQUFHLE9BQU8sR0FBRyxXQUFXLENBQUM7UUFHL0MsV0FBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDMUQsYUFBYSxHQUFHLFVBQVMsU0FBUztZQUNoQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNkLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDbEQsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3BCLENBQUM7UUFDSCxDQUFDLENBQUM7UUFFRixPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsT0FBTyxFQUFFLGFBQWEsQ0FBQyxD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QUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDbkMsS0FBSyxHQUFHLElBQUksQ0FBQztvQkFDZixDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNOLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7b0JBQzdFLENBQUM7b0JBQ0QsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQzt3QkFDZCxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ25CLENBQUM7Z0JBQ0gsQ0FBQztnQkFBQyxLQUFLLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNWLGFBQWEsQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUM5RSxDQUFDO1lBQ0gsQ0FBQztZQUNELEtBQUssRUFBRSxVQUFTLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTTtnQkFDdkMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDdEYsQ0FBQztTQUNGLENBQUMsQ0FBQztRQUtMLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFbEQsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNqQixDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChDKSAyMDA3LTIwMTUgZUJheSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKi9cblxuLypcbiAgdmFyIENvbmZpZ3MgPSByZXF1aXJlKFwiY29yZS9jb25maWdzL2luaXRcIikuQ29uZmlncztcbiAgdmFyIExvZ2dlciA9IHJlcXVpcmUoXCJoZWxwZXJzL2xvZ2dlclwiKS5Mb2dnZXI7XG4gIHZhciBCcm93c2VySGVscGVyID0gcmVxdWlyZShcImNvcmUvaGVscGVycy9icm93c2VySGVscGVyXCIpLkJyb3dzZXJIZWxwZXI7XG4gIHZhciBVdGlsaXR5SGVscGVyID0gcmVxdWlyZShcImhlbHBlcnMvdXRpbGl0eUhlbHBlclwiKS5VdGlsaXR5SGVscGVyO1xuICB2YXIgQXBpSGVscGVyID0gcmVxdWlyZShcImNvcmUvaGVscGVycy9hcGlIZWxwZXJcIikuQXBpSGVscGVyO1xuICB2YXIgTWVzc2FnZVBhbmVsU2VydmljZSA9IHJlcXVpcmUoXCJjb3JlL3NlcnZpY2VzL21lc3NhZ2VQYW5lbFNlcnZpY2VcIikuTWVzc2FnZVBhbmVsU2VydmljZTtcbiAgdmFyIFByb3BlcnR5REFPID0gcmVxdWlyZShcInN0b3JhZ2UvcHJvcGVydHlEQU9cIikuUHJvcGVydHlEQU87XG4qL1xuXG4vKipcbiAqIFNob3BwaW5nIEFQSSBhY3Rpb25zXG4gKi9cbnZhciBTaG9wcGluZ0FwaSA9IHtcbiAgX0lHTk9SQUJMRV9FUlJPUlMgOiBbXCIxMC4yMFwiLCBcIjEwLjg1XCIsIFwiMTAuMTJcIiwgXCIxMC4xNVwiXSxcblxuICAvKipcbiAgICogU2hvcHBpbmcgQVBJIEdldFVzZXJQcm9maWxlXG4gICAqIEBwYXJhbSBhY3RpdmVBY2NvdW50IHRoZSBhY3RpdmUgYWNjb3VudFxuICAgKiBAcGFyYW0gYVVzZXJJZCB0aGUgdXNlcklkIHRvIGdldCB0aGVpciBwcm9maWxlXG4gICAqIEBwYXJhbSBhU2l0ZUlkIHRoZSBzaXRlIGlkIHRvIHVzZSBpbiB0aGUgcmVxdWVzdFxuICAgKiBAcGFyYW0gYUNhbGxiYWNrLlxuICAgKiBAcmV0dXJucyByZXF1ZXN0IG9iamVjdFxuICAgKi9cbiAgZ2V0VXNlclByb2ZpbGUgOiBmdW5jdGlvbihhY3RpdmVBY2NvdW50LCBhVXNlcklkLCBhU2l0ZUlkLCBhQ2FsbGJhY2spIHtcbiAgICBpZiAoIWFjdGl2ZUFjY291bnQpIHtcbiAgICAgIExvZ2dlci5mYXRhbChcIkF0dGVtcHQgdG8gbWFrZSBTaG9wcGluZyBBUEkgR2V0VXNlclByb2ZpbGUgY2FsbCB3aGVuIFwiICtcbiAgICAgICAgICAgICAgICAgICBcIm5vIGFjY291bnQgaXMgYWN0aXZlLlwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgdmFyIGlubmVyQm9keTtcbiAgICB2YXIgd3JhcHBlZEJvZHk7XG4gICAgdmFyIGxvY2FsQ2FsbGJhY2s7XG4gICAgdmFyIHJlcXVlc3Q7XG5cbiAgICBpbm5lckJvZHkgPSBcIjxJbmNsdWRlU2VsZWN0b3I+RGV0YWlsczwvSW5jbHVkZVNlbGVjdG9yPlwiICtcbiAgICAgICAgICAgICAgICBcIjxVc2VySUQ+XCIgKyBhVXNlcklkICsgXCI8L1VzZXJJRD5cIjtcblxuICAgIC8vIGRvIHRoZSBjYWxsXG4gICAgd3JhcHBlZEJvZHkgPSB0aGlzLl93cmFwQ2FsbChcIkdldFVzZXJQcm9maWxlXCIsIGlubmVyQm9keSk7XG4gICAgbG9jYWxDYWxsYmFjayA9IGZ1bmN0aW9uKGFSZXNwb25zZSkge1xuICAgICAgaWYgKGFDYWxsYmFjaykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhhdC5fcGFyc2VHZXRVc2VyUHJvZmlsZShhUmVzcG9uc2UpO1xuICAgICAgICBhQ2FsbGJhY2socmVzdWx0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVxdWVzdCA9IHRoaXMuX2RvQ2FsbCh3cmFwcGVkQm9keSwgYVNpdGVJZCwgbG9jYWxDYWxsYmFjayk7XG5cbiAgICByZXR1cm4gcmVxdWVzdDtcbiAgfSxcblxuICAvKipcbiAgICogUHJvY2Vzc2VzIGEgR2V0VXNlclByb2ZpbGUgcmVzcG9uc2VcbiAgICogQHBhcmFtIGFSZXNwb25zZVxuICAgKiBAcmV0dXJucyBjdXJyZW50IHVzZXIncyBmZWVkYmFjayBzY29yZVxuICAgKi9cbiAgX3BhcnNlR2V0VXNlclByb2ZpbGUgOiBmdW5jdGlvbihhUmVzcG9uc2UpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKCFhUmVzcG9uc2UpIHtcbiAgICAgIHJlc3VsdC5lcnJvcnMgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgeG1sID0gJChhUmVzcG9uc2UpO1xuXG4gICAgICByZXN1bHQuZmVlZGJhY2tSYXRpbmcgPSB4bWwuZmluZChcIkZlZWRiYWNrU2NvcmVcIikudGV4dCgpO1xuICAgICAgcmVzdWx0LnJlZ2lzdHJhdGlvblNpdGUgPSB4bWwuZmluZChcIlJlZ2lzdHJhdGlvblNpdGVcIikudGV4dCgpO1xuICAgICAgcmVzdWx0LnBvc2l0aXZlRmVlZGJhY2tQZXJjZW50ID0geG1sLmZpbmQoXCJQb3NpdGl2ZUZlZWRiYWNrUGVyY2VudFwiKS50ZXh0KCk7XG4gICAgICByZXN1bHQuZmVlZGJhY2tSYXRpbmdTdGFyID0geG1sLmZpbmQoXCJGZWVkYmFja1JhdGluZ1N0YXJcIikudGV4dCgpO1xuICAgICAgcmVzdWx0Lm15V29ybGRMYXJnZUltYWdlID0geG1sLmZpbmQoXCJNeVdvcmxkTGFyZ2VJbWFnZVwiKS50ZXh0KCk7XG4gICAgICByZXN1bHQubXlXb3JsZFNtYWxsSW1hZ2UgPSB4bWwuZmluZChcIk15V29ybGRTbWFsbEltYWdlXCIpLnRleHQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBvcnRzIGFueSBlcnJvciBtZXNzYWdlcyBpbiB0aGUgQVBJIHJlc3BvbnNlLlxuICAgKiBAcGFyYW0gYVJlc3BvbnNlIHRoZSBBUEkgcmVzcG9uc2UuXG4gICAqL1xuICBfdmFsaWRhdGVSZXNwb25zZSA6IGZ1bmN0aW9uKGFSZXNwb25zZSkge1xuXG4gICAgaWYgKCFhUmVzcG9uc2UpIHtcbiAgICAgIExvZ2dlci5lcnJvcihcIlNob3BwaW5nQXBpIEVycm9yOiBubyByZXNwb25zZSBkb2N1bWVudCFcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIG5vZGUgPSAkKGFSZXNwb25zZSkuZmluZChcIkFja1wiKTtcbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIExvZ2dlci5lcnJvcihcIlNob3BwaW5nQXBpIEVycm9yOiBubyBBY2sgbm9kZSFcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCQobm9kZSkudGV4dCgpICE9IFwiU3VjY2Vzc1wiKSB7XG4gICAgICB2YXIgZXJyb3JzID0gJChhUmVzcG9uc2UpLmZpbmQoXCJFcnJvcnNcIik7XG4gICAgICAkLmVhY2goZXJyb3JzLCBmdW5jdGlvbihhSW5kZXgsIGFFcnJvcikge1xuICAgICAgICB2YXIgc2V2ZXJpdHlDb2RlID0gJChhRXJyb3IpLmZpbmQoXCJTZXZlcml0eUNvZGVcIik7XG4gICAgICAgIGlmICgkKHNldmVyaXR5Q29kZSkudGV4dCgpID09IFwiV2FybmluZ1wiKSB7XG4gICAgICAgICAgTG9nZ2VyLndhcm4oXCJTaG9wcGluZ0FwaSBXYXJuaW5nOiBcIiArICQoYUVycm9yKS5maW5kKFwiU2hvcnRNZXNzYWdlXCIpLnRleHQoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGVycm9yQ29kZSA9ICQoYUVycm9yKS5maW5kKFwiRXJyb3JDb2RlXCIpLnRleHQoKTtcbiAgICAgICAgICB2YXIgaXNJZ25vcmVkID0gJC5pbkFycmF5KGVycm9yQ29kZSwgdGhpcy5fSUdOT1JBQkxFX0VSUk9SUykgPT0gLTE7XG4gICAgICAgICAgaWYgKCFpc0lnbm9yZWQpIHtcbiAgICAgICAgICAgIExvZ2dlci5lcnJvcihcIlNob3BwaW5nQXBpIEVycm9yOiBcIiArICQoYUVycm9yKS5maW5kKFwiU2hvcnRNZXNzYWdlXCIpLnRleHQoKSk7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2VOYW1lID0gXCJcIjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJlc3BvbnNlTmFtZSA9ICQoYVJlc3BvbnNlKS5jaGlsZHJlbihcIjpmaXJzdFwiKS5wcm9wKFwidGFnTmFtZVwiKTtcbiAgICAgICAgICAgICAgLyguKilSZXNwb25zZS8uZXhlYyhyZXNwb25zZU5hbWUpWzFdO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdyYXBzIGFuIFhNTCBmcmFnbWVudCBpbnRvIGEgU2hvcHBpbmcgQVBJIGNhbGxcbiAgICogQHBhcmFtIGFDYWxsTmFtZSBUaGUgbmFtZSBvZiB0aGUgY2FsbCAod2l0aG91dCBcIlJlcXVlc3RcIilcbiAgICogQHBhcmFtIGFJbm5lckJvZHkgVGhlIGJvZHkgb2YgdGhlIGNhbGxcbiAgICogQHJldHVybnMgdGhlIGZ1bGx5LWZvcm1lZCB0ZXh0XG4gICAqL1xuICBfd3JhcENhbGwgOiBmdW5jdGlvbihhQ2FsbE5hbWUsIGFJbm5lckJvZHkpIHtcbiAgICB2YXIgd3JhcHBlZEJvZHkgPVxuICAgICAgJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cInV0Zi04XCI/PicgK1xuICAgICAgJzwnICsgYUNhbGxOYW1lICsgJ1JlcXVlc3QgeG1sbnM9XCJ1cm46ZWJheTphcGlzOmVCTEJhc2VDb21wb25lbnRzXCI+JyArXG4gICAgICBhSW5uZXJCb2R5ICtcbiAgICAgICc8LycgKyBhQ2FsbE5hbWUgKyAnUmVxdWVzdD4nO1xuXG4gICAgcmV0dXJuIHdyYXBwZWRCb2R5O1xuICB9LFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBTaG9wcGluZyBBUEkgY2FsbFxuICAgKiBAcGFyYW0gYUJvZHkgVGhlIGZ1bGwgYm9keSBvZiB0aGUgY2FsbCwgYXMgd2lsbCBiZSBQT1NUZWRcbiAgICogQHBhcmFtIGFTaXRlSWQgdGhlIHNpdGUgaWQgdG8gdXNlIGluIHRoZSByZXF1ZXN0XG4gICAqIEBwYXJhbSBhQ2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAqIHF1ZXJ5IHJlc3VsdHNcbiAgICovXG4gIF9kb0NhbGwgOiBmdW5jdGlvbihhQm9keSwgYVNpdGVJZCwgYUNhbGxiYWNrKSB7XG5cbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgdmFyIHJlcXVlc3ROYW1lO1xuXG4gICAgLy8gRXh0cmFjdCB0aGUgY2FsbCBuYW1lIGZyb20gdGhlIGJvZHkgLS0tIHdlIG5lZWQgaXQgaW4gdGhlIGhlYWRlcnNcbiAgICB0cnkge1xuICAgICAgcmVxdWVzdE5hbWUgPSAvPjwoLio/KVJlcXVlc3QvLmV4ZWMoYUJvZHkpWzFdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIExvZ2dlci5mYXRhbChcIlNob3BwaW5nIEFQSSByZXF1ZXN0IHdpbGwgbm90IGJlIHNlbnQsIGFzIGl0IGlzIFwiICtcbiAgICAgICAgICAgICAgICAgICBcImJhZGx5LWZvcm1lZC5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPVxuICAgICAgJC5hamF4KHtcbiAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24oYVhIUikge1xuICAgICAgICAgIGFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIlgtRUJBWS1BUEktQ0FMTC1OQU1FXCIsIHJlcXVlc3ROYW1lKTtcbiAgICAgICAgICBhWEhSLnNldFJlcXVlc3RIZWFkZXIoXG4gICAgICAgICAgICBcIlgtRUJBWS1BUEktQVBQLUlEXCIsIEFwaUhlbHBlci5nZXRFbmRQb2ludChcImNsaWVudElkXCIpKTtcbiAgICAgICAgICBhWEhSLnNldFJlcXVlc3RIZWFkZXIoXG4gICAgICAgICAgICBcIlgtRUJBWS1BUEktVkVSU0lPTlwiLCBDb25maWdzLlNIT1BQSU5HX0FQSV9WRVJTSU9OKTtcbiAgICAgICAgICBhWEhSLnNldFJlcXVlc3RIZWFkZXIoXCJYLUVCQVktQVBJLVNJVEUtSURcIiwgYVNpdGVJZCk7XG4gICAgICAgICAgYVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFwiWC1FQkFZLUFQSS1SRVFVRVNULUVOQ09ESU5HXCIsIFwiWE1MXCIpO1xuICAgICAgICAgIGFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIlgtRUJBWS1BUEktUkVTUE9OU0UtRU5DT0RJTkdcIiwgXCJYTUxcIik7XG4gICAgICAgICAgLy8gc2V0IHRoZSBleHRlbnNpb24gdmVyc2lvbiBhcyByZXF1ZXN0IGhlYWRlciAoYXMgc3VnZ2VzdGVkIGJ5IERhbiBQb3dlcilcbiAgICAgICAgICBhWEhSLnNldFJlcXVlc3RIZWFkZXIoXG4gICAgICAgICAgICBcIlgtRUJBWS1TSURFQkFSLVZFUlNJT05cIiwgQnJvd3NlckhlbHBlci5nZXRFeHRlbnNpb25WZXJzaW9uKCkpO1xuICAgICAgICB9LFxuICAgICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgICAgY29udGVudFR5cGU6IFwidGV4dC94bWxcIixcbiAgICAgICAgdXJsOiBBcGlIZWxwZXIuZ2V0RW5kUG9pbnQoXCJzaG9wcGluZ0FwaVwiKSxcbiAgICAgICAgZGF0YTogYUJvZHksXG4gICAgICAgIGpzb25wOiBmYWxzZSxcbiAgICAgICAgdGltZW91dDogUHJvcGVydHlEQU8uZ2V0KFByb3BlcnR5REFPLlBST1BfQVBJX1RJTUVPVVQpLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihhRGF0YSwgYVRleHRTdGF0dXMpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCF0aGF0Ll92YWxpZGF0ZVJlc3BvbnNlKGFEYXRhKSkge1xuICAgICAgICAgICAgICBhRGF0YSA9IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBNZXNzYWdlUGFuZWxTZXJ2aWNlLmRpc21pc3NNZXNzYWdlKE1lc3NhZ2VQYW5lbFNlcnZpY2UuVFlQRS5DT05ORUNUX0VSUk9SKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgYUNhbGxiYWNrKGFEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgIFV0aWxpdHlIZWxwZXIuaGFuZGxlRXJyb3IoXCJTaG9wcGluZ0FwaVwiLCByZXF1ZXN0TmFtZSwgZS5tZXNzYWdlLCBhQ2FsbGJhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGFYSFIsIGFUZXh0U3RhdHVzLCBhRXJyb3IpIHtcbiAgICAgICAgICBVdGlsaXR5SGVscGVyLmhhbmRsZUVycm9yKFwiU2hvcHBpbmdBcGlcIiwgcmVxdWVzdE5hbWUsIGFYSFIucmVzcG9uc2VUZXh0LCBhQ2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIC8vIGFkZCBwZW5kaW5nIHJlcXVlc3QgdG8gYSBsaXN0IHNvIHBlbmRpbmcgcmVxdWVzdCB3b3VsZCBiZSBjYW5jZWxsZWQgZm9yXG4gICAgLy8gYSBsb25nIHBlcmlvZCBvZiB0aW1lIGFuZCBhbHNvIGFsbCBwZW5kaW5nIHJlcXVlc3RzIGNhbiBiZSBhYm9ydGVkIHdoZW5cbiAgICAvLyB1c2VyIHNpZ25zIG91dC5cbiAgICBBcGlIZWxwZXIuYWRkUGVuZGluZ1JlcXVlc3QocmVxdWVzdCwgcmVxdWVzdE5hbWUpO1xuXG4gICAgcmV0dXJuIHJlcXVlc3Q7XG4gIH1cbn07XG4iXX0=