/*!
 * Copyright (C) 2007-2015 eBay Inc. All Rights Reserved.
 */
var MyEbayApplicationApi = {
    _XML_HEADER: "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
    _XML_NAMESPACE: "xmlns=\"http://www.ebay.com/marketplace/mobile/v1/services\"",
    removeFromDidntWinList: function (aToken, aItems, aSiteId, aCallback) {
        if (!aToken) {
            Logger.error("Attempt to make MyEbayApplication API " +
                "removeFromDidntWinList call when no account is active.");
            return;
        }
        var wrappedBody;
        var localCallback;
        var request;
        var innerBody = "";
        $.each(aItems, function (aIndex, aItem) {
            innerBody += "<itemID>" + aItem.itemId + "</itemID>";
        });
        wrappedBody = this._wrapCall("removeFromDidntWinList", innerBody);
        localCallback = function (aResponse) {
            var result = {};
            try {
                if (aCallback) {
                    if (!aResponse) {
                        result.errors = true;
                    }
                    aCallback(result);
                }
            }
            catch (e) {
                Logger.error("MyEbayApplicationApi.removeFromDidntWinList Error: " + e.message);
            }
        };
        request = this._doCall(wrappedBody, aSiteId, localCallback, aToken);
        return request;
    },
    removeFromWonList: function (aToken, aItems, aSiteId, aCallback) {
        if (!aToken) {
            Logger.error("Attempt to make MyEbayApplication API removeFromWonList " +
                "call when no account is active.");
            return;
        }
        var wrappedBody;
        var localCallback;
        var request;
        var innerBody = "";
        $.each(aItems, function (aIndex, aItem) {
            innerBody +=
                "<item>" +
                    "<itemID>" + aItem.itemId + "</itemID>" +
                    "<transactionID>" + aItem.transactionId + "</transactionID>" +
                    "</item>";
        });
        wrappedBody = this._wrapCall("removeFromWonList", innerBody);
        localCallback = function (aResponse) {
            var result = {};
            try {
                if (aCallback) {
                    if (!aResponse) {
                        result.errors = true;
                    }
                    aCallback(result);
                }
            }
            catch (e) {
                Logger.error("MyEbayApplicationApi.removeFromWonList Error: " + e.message);
            }
        };
        request = this._doCall(wrappedBody, aSiteId, localCallback, aToken);
        return request;
    },
    removeFromUnsoldList: function (aToken, aItems, aSiteId, aCallback) {
        if (!aToken) {
            Logger.error("Attempt to make MyEbayApplication API " +
                "removeFromUnsoldList call when no account is active.");
            return;
        }
        var wrappedBody;
        var localCallback;
        var request;
        var innerBody = "";
        $.each(aItems, function (aIndex, aItem) {
            innerBody += "<itemID>" + aItem.itemId + "</itemID>";
        });
        wrappedBody = this._wrapCall("removeFromUnsoldList", innerBody);
        localCallback = function (aResponse) {
            var result = {};
            try {
                if (aCallback) {
                    if (!aResponse) {
                        result.errors = true;
                    }
                    aCallback(result);
                }
            }
            catch (e) {
                Logger.error("MyEbayApplicationApi.removeFromUnsoldList Error: " + e.message);
            }
        };
        request = this._doCall(wrappedBody, aSiteId, localCallback, aToken);
        return request;
    },
    removeFromSoldList: function (aToken, aItems, aSiteId, aCallback) {
        if (!aToken) {
            Logger.error("Attempt to make MyEbayApplication API removeFromSoldList " +
                "call when no account is active.");
            return;
        }
        var wrappedBody;
        var localCallback;
        var request;
        var innerBody = "";
        $.each(aItems, function (aIndex, aItem) {
            innerBody +=
                "<item>" +
                    "<itemID>" + aItem.itemId + "</itemID>" +
                    "<transactionID>" + aItem.transactionId + "</transactionID>" +
                    "</item>";
        });
        wrappedBody = this._wrapCall("removeFromSoldList", innerBody, aToken);
        localCallback = function (aResponse) {
            var result = {};
            try {
                if (aCallback) {
                    if (!aResponse) {
                        result.errors = true;
                    }
                    aCallback(result);
                }
            }
            catch (e) {
                Logger.error("MyEbayApplicationApi.removeFromSoldList Error: " + e.message);
            }
        };
        request = this._doCall(wrappedBody, aSiteId, localCallback, aToken);
        return request;
    },
    _validateResponse: function (aResponse) {
        if (!aResponse) {
            Logger.error("MyEbayApplicationApi error (no reponse document!)");
            return false;
        }
        var node = $(aResponse).find("Ack");
        if (!node) {
            Logger.error("MyEbayApplicationApi error (no Ack node!)");
            return false;
        }
        if ($(node).text() != "Success") {
            $.each($(aResponse).find("error"), function () {
                var errorCode = Number($(this).find("errorId").text());
                var severity = String($(this).find("severity").text());
                if (severity.indexOf("Error") != -1) {
                    Logger.error("MyEbayApplication API Error:\n" + "Error Code: " +
                        errorCode + "\Message: " +
                        String($(this).find("message").text()) +
                        "\nSeverity: " + severity +
                        "\nError category: " +
                        String($(this).find("category").text()) + "\n");
                    var responseName = "";
                    try {
                        responseName = $(aResponse).children(":first").prop("tagName");
                        responseName = /(.*)Response/.exec(responseName)[1];
                    }
                    catch (e) { }
                }
                return false;
            });
        }
        return true;
    },
    _wrapCall: function (aRequestName, aInnerBody) {
        var wrappedBody = this._XML_HEADER +
            "<" + aRequestName + "Request " + this._XML_NAMESPACE + ">" +
            aInnerBody +
            "</" + aRequestName + "Request>";
        return wrappedBody;
    },
    _doCall: function (aRequestBody, aSiteId, aCallback, aToken) {
        var that = this;
        var requestName;
        var request;
        try {
            requestName = /><(.*?)Request/.exec(aRequestBody)[1];
        }
        catch (e) {
            Logger.error("MyEbayApplication API request will not be sent, as it is" +
                " badly-formed. \n" + aRequestBody);
            return null;
        }
        request =
            $.ajax({
                beforeSend: function (aXHR) {
                    aXHR.setRequestHeader("X-EBAY-SOA-SERVICE-NAME", "MyEbayApplicationService");
                    aXHR.setRequestHeader("X-EBAY-SOA-OPERATION-NAME", requestName);
                    aXHR.setRequestHeader("X-EBAY-SOA-SECURITY-TOKEN", aToken);
                    aXHR.setRequestHeader("X-EBAY-SOA-SECURITY-APPNAME", ApiHelper.getEndPoint("clientId"));
                    aXHR.setRequestHeader("X-EBAY-SIDEBAR-VERSION", BrowserHelper.getExtensionVersion());
                },
                type: "POST",
                contentType: "text/xml",
                url: ApiHelper.getEndPoint("myeBayApplicationApi"),
                data: aRequestBody,
                dataType: "xml",
                jsonp: false,
                timeout: PropertyDAO.get(PropertyDAO.PROP_API_TIMEOUT),
                success: function (aData, aTextStatus) {
                    try {
                        if (aTextStatus == "success") {
                            if (!that._validateResponse(aData)) {
                                aData = null;
                            }
                            else {
                                MessagePanelService.dismissMessage(MessagePanelService.TYPE.CONNECT_ERROR);
                            }
                            if (aCallback) {
                                aCallback(aData);
                            }
                        }
                    }
                    catch (e) {
                        UtilityHelper.handleError("MyEbayApplicationApi", requestName, e.message, aCallback);
                    }
                },
                error: function (aXHR, aTextStatus, aError) {
                    UtilityHelper.handleError("MyEbayApplicationApi", requestName, aXHR.responseText, aCallback);
                }
            });
        ApiHelper.addPendingRequest(request, requestName);
        return request;
    }
};
//# sourceMappingURL=data:application/json;base64,