/*!
 * Copyright (C) 2007-2015 eBay Inc. All Rights Reserved.
 */
var ObjectHelper = {
    getTypedValue: function (aType, aValue) {
        var value;
        if (undefined === aValue || null === aValue) {
            value = null;
        }
        else {
            switch (aType) {
                case "number":
                    if (isNaN(aValue)) {
                        value = null;
                    }
                    else {
                        value = Number(aValue);
                    }
                    break;
                case "boolean":
                    switch (typeof (aValue)) {
                        case "boolean":
                            value = Boolean(aValue);
                            break;
                        case "string":
                            if ("true" == aValue) {
                                value = true;
                            }
                            else if ("false" == aValue) {
                                value = false;
                            }
                            else {
                                value = false;
                            }
                            break;
                        default:
                            value = false;
                            break;
                    }
                    break;
                case "string":
                    value = String(aValue);
                    break;
                case "listingFormat":
                    value = aValue;
                    break;
                case "object":
                    value = aValue;
                    break;
                default:
                    value = aValue;
                    break;
            }
        }
        return value;
    },
    copyObject: function (aObject, aClass) {
        var object = new aClass();
        for (var name in aClass.SCHEMA.PROPERTIES) {
            object.set(name, aObject.get(name));
        }
        return object;
    },
    updateTo: function (aCurObject, aNewObject, aSchema) {
        var modifiedFields = [];
        var curValue;
        var newValue;
        for (var name in aSchema.PROPERTIES) {
            curValue = aCurObject.get(name);
            newValue = aNewObject.get(name);
            if (newValue !== undefined && newValue !== null &&
                curValue != newValue) {
                aCurObject.set(name, newValue);
                modifiedFields[modifiedFields.length] = name;
            }
        }
        return modifiedFields.length > 0 ? modifiedFields : null;
    },
    updateWithJSON: function (aObject, aJSON, aSchema) {
        $.each(aSchema.PROPERTIES, function (aName) {
            aObject.set(aName, aJSON[aName]);
        });
    },
    fromXML: function (aXMLNode, aClass, aExclusivePrefix) {
        var object = new aClass();
        var xmlName = null;
        var xmlValue = null;
        var that = this;
        $.each(aClass.SCHEMA.PROPERTIES, function (aName, aInfo) {
            xmlName = null;
            if (aInfo.xml !== "") {
                if (aExclusivePrefix) {
                    if (aInfo.xml.indexOf(aExclusivePrefix) === 0) {
                        xmlName = aInfo.xml.substring(aExclusivePrefix.length + 1);
                    }
                }
                else {
                    xmlName = aInfo.xml;
                }
                if (xmlName !== null) {
                    xmlValue = that._getXMLValue(aXMLNode, xmlName);
                    if (xmlValue && xmlValue !== null && xmlValue !== "") {
                        object.set(aName, xmlValue);
                    }
                    else {
                        object.set(aName, aInfo.defaultValue);
                    }
                }
            }
        });
        return object;
    },
    _getXMLValue: function (aXMLTree, aXMLName) {
        var xmlNames = aXMLName.split("|");
        var xmlValue = null;
        $.each(xmlNames, function (aNameIndex, aName) {
            var xmlFields = aName.split(".");
            var xmlNode = aXMLTree;
            $.each(xmlFields, function (aFieldIndex, aField) {
                if (aField[0] != "@") {
                    var arrayStart = aField.indexOf('[');
                    if (arrayStart != -1) {
                        var arrayIndex = aField.substring(arrayStart + 1, aField.indexOf(']'));
                        aField = aField.substring(0, arrayStart);
                        xmlNode = $(xmlNode).children(aField).eq(arrayIndex);
                    }
                    else {
                        xmlNode = $(xmlNode).children(aField);
                    }
                    if (xmlNode.length === 0) {
                        return false;
                    }
                }
                else {
                    xmlNode = $(xmlNode);
                }
            });
            if (xmlNode.length > 0) {
                if (xmlFields[(xmlFields.length - 1)][0] == "@") {
                    var xmlAttr = xmlFields[(xmlFields.length - 1)].substring(1);
                    xmlValue = $(xmlNode).attr(xmlAttr);
                }
                else {
                    xmlValue = $(xmlNode).text();
                }
                return false;
            }
        });
        return xmlValue;
    }
};
//# sourceMappingURL=data:application/json;base64,