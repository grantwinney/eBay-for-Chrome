/*!
 * Copyright (C) 2007-2015 eBay Inc. All Rights Reserved.
 */
var RoverUrlHelper = {
    _roverUrlTemplate: null,
    getUrl: function (aInfoObj) {
        var urlTemplate;
        var template;
        var homeSite;
        var domain;
        urlTemplate = Configs.URLS[aInfoObj.templateName];
        if (!urlTemplate) {
            Logger.error("Bad URL Template name: '" + aInfoObj.templateName + "'");
            return null;
        }
        template = new UrlTemplate(urlTemplate);
        homeSite =
            ("homeSite" in aInfoObj) ? aInfoObj.homeSite : Site.getHomeSite();
        if (aInfoObj.args && aInfoObj.args.domain) {
            domain = aInfoObj.args.domain;
        }
        else {
            domain = Site.siteDataForSite(homeSite).domain;
        }
        template.setArg("DOMAIN", domain);
        if ("args" in aInfoObj && aInfoObj.args) {
            $.each(aInfoObj.args, function (aArg, aValue) {
                template.setArg(aArg, aValue);
            });
        }
        return this.getRoverUrl({ url: template.url(), homeSite: homeSite, srcAreaName: aInfoObj.srcAreaName, activeAccount: aInfoObj.activeAccount });
    },
    getRoverUrl: function (aInfoObj) {
        var roverAreaName;
        var processedUrl;
        roverAreaName = Configs.ROVER_NAMES[aInfoObj.srcAreaName];
        if (!roverAreaName || roverAreaName == "NOTWRAPPED") {
            processedUrl = aInfoObj.url;
        }
        else {
            if (!this._roverUrlTemplate) {
                this._roverUrlTemplate = Configs.URLS["roverTrack"];
            }
            var locale = Configs.SUPPORTED_SITES_DATA[aInfoObj.homeSite].locale;
            var roverId = Configs.ROVER_IDS[locale];
            var roverTemplate = new UrlTemplate(this._roverUrlTemplate);
            roverTemplate.setArg("ROVID", roverId).
                setArg("AREA", this.getRoverTrackingInfo(aInfoObj)).
                setArg("URL", encodeURIComponent(aInfoObj.url)).
                setArg("MPT", $.now());
            processedUrl = roverTemplate.url();
        }
        return processedUrl;
    },
    performSearch: function (aKeywords, aSourceArea, aEvent, aType, aId) {
        var url;
        var roverObj = { srcAreaName: aSourceArea };
        var keywords = encodeURIComponent(aKeywords);
        if (!aType || aType == "keyword") {
            roverObj.templateName = "search";
            roverObj.args = { "query": keywords };
        }
        else if (aType == "category") {
            roverObj.templateName = "category";
            roverObj.args = { "query": keywords, "categoryId": encodeURIComponent(aId) };
        }
        else {
            roverObj.templateName = "catalog";
            roverObj.args = { "prodId": encodeURIComponent(aId) };
        }
        url = this.getUrl(roverObj);
        Site.openRawURL(url, aEvent, true);
    },
    loadPage: function (aUrlTemplate, aSourceArea, aArguments, aEvent) {
        var forceNewTab = false;
        var url = RoverUrlHelper.getUrl({ srcAreaName: aSourceArea,
            templateName: aUrlTemplate,
            args: aArguments });
        if (aArguments && aArguments.forceNewTab) {
            forceNewTab = true;
        }
        Site.openRawURL(url, aEvent, forceNewTab);
    },
    sendTrackingRequest: function (aType) {
        if (PropertyDAO.get(PropertyDAO.PROP_INSTALLATION_TRACKED) &&
            aType === "install") {
            return;
        }
        var locale;
        var homeSite = Site.getHomeSite();
        var site = Configs.SUPPORTED_SITES_DATA[homeSite];
        if (site) {
            locale = site.locale;
        }
        else {
            locale = "en-us";
        }
        var trackTag = Configs.INSTALL_TRACK_TAGS[locale];
        var time = Date.now();
        var random = String(Math.random()).split(".")[1];
        var uniqueId = time + random;
        var args = {
            tracktag: trackTag,
            mfe: aType,
            uniqueid: uniqueId
        };
        var url = RoverUrlHelper.getUrl({ srcAreaName: "installTracker",
            templateName: "installTrack",
            args: args });
        $.ajax({
            type: "GET",
            url: url,
            success: function (aData, aTextStatus) {
                PropertyDAO.set(PropertyDAO.PROP_INSTALLATION_TRACKED, true);
            },
            error: function (aXHR, aTextStatus, aError) {
                Logger.error("Error loading tracking pixel: " + url);
            }
        });
    },
    getRoverTrackingInfo: function (aExtraInfo) {
        var activeAccount = Account.getAccount();
        var site = Site.getHomeSite();
        var iso = Site.siteDataForCountries(site).iso;
        var signedInStr = activeAccount ? "si" : "so";
        var lang = UtilityHelper.getBrowserLanguage().substring(0, 2);
        var infoArr = [signedInStr, lang + "-" + iso];
        if (aExtraInfo.srcAreaName) {
            infoArr.push(aExtraInfo.srcAreaName);
        }
        return infoArr.join("_");
    }
};
function UrlTemplate(aUrl) {
    this._url = aUrl;
}
UrlTemplate.prototype = {
    url: function () {
        if (this.requiredArgs().length > 0) {
            Logger.warn("Returning UrlTemplate with unresolved placeholders:");
        }
        return this._url;
    },
    requiredArgs: function () {
        var argsRE = /#{(.*?)}/g;
        var result;
        var args = [];
        while (result = argsRE.exec(this._url)) {
            args.push(result[1]);
        }
        return args;
    },
    setArg: function (aArg, aValue) {
        if (typeof (aValue) == "undefined" || aValue === null) {
            Logger.warn("Undefined value passed for placeholder '" + aArg + "'.");
            aValue = "";
        }
        var argRE = new RegExp("#{" + aArg + "}", "gi");
        this._url = this._url.replace(argRE, aValue);
        return this;
    }
};
//# sourceMappingURL=data:application/json;base64,