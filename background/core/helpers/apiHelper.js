/*!
 * Copyright (C) 2007-2015 eBay Inc. All Rights Reserved.
 */
var ApiHelper = {
    _lastRequestIndex: -1,
    _pendingRequests: {},
    addPendingRequest: function (aRequest, aRequestName, aTopic) {
        var TIMEOUT_ERROR_MSG = "Call timed out after " + (PropertyDAO.get(PropertyDAO.PROP_API_TIMEOUT) / 1000) + " seconds";
        var requestIndex = this._lastRequestIndex++;
        var timeout = new Timer(function () {
            if (aRequestName.indexOf("deactivateUserOnDevice") == -1) {
                Logger.error(aRequestName + ": " + TIMEOUT_ERROR_MSG);
                aRequest.abort();
                if (aTopic) {
                    ObserverHelper.notify(aTopic);
                }
            }
        }, PropertyDAO.get(PropertyDAO.PROP_API_TIMEOUT));
        this._pendingRequests[requestIndex] = {
            request: aRequest, timeout: timeout, requestName: aRequestName
        };
        aRequest.done(function () {
            this.removePendingRequest(requestIndex, aRequestName);
        }.bind(this));
        aRequest.fail(function () {
            this.removePendingRequest(requestIndex, aRequestName);
        }.bind(this));
        return requestIndex;
    },
    removePendingRequest: function (aRequestIndex, aRequestName) {
        if (!this._pendingRequests[aRequestIndex]) {
            if (aRequestName.indexOf("deactivateUserOnDevice") == -1) {
                Logger.error("Attempt to remove a request that isn't in the list of " +
                    "pending requests (" + aRequestName + ")!");
            }
            return;
        }
        this._pendingRequests[aRequestIndex].timeout.cancel();
        delete this._pendingRequests[aRequestIndex];
    },
    abortPendingRequests: function () {
        $.each(this._pendingRequests, function () {
            if (this.requestName.indexOf("deactivateUserOnDevice") == -1) {
                this.timeout.cancel();
                this.request.abort();
            }
        });
        this._lastRequestIndex = -1;
        this._pendingRequests = {};
    },
    getEndPoint: function (endPoint) {
        var servicesLocation = PropertyDAO.get(PropertyDAO.PROP_SERVICES_LOCATION);
        if (!servicesLocation) {
            servicesLocation = "production";
        }
        return _.get(Configs.END_POINTS, [endPoint, servicesLocation]);
    }
};
//# sourceMappingURL=data:application/json;base64,