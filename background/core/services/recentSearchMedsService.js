/*!
 * Copyright (C) 2007-2015 eBay Inc. All Rights Reserved.
 */
var RecentSearchMedsService = {
    _recentSearchesCache: null,
    init: function () {
        ObserverHelper.addObserver(this, Topics.ACCOUNT_SIGNED_IN);
        ObserverHelper.addObserver(this, Topics.ACCOUNT_SIGNED_OUT);
    },
    get recentSearches() {
        var recentSearch;
        var plainRecentSearches;
        var convertedRecentSearches = [];
        if (!this._recentSearchesCache) {
            plainRecentSearches = PropertyDAO.get(PropertyDAO.PROP_RECENT_SEARCHES);
            if (plainRecentSearches) {
                for (var i = 0; i < plainRecentSearches.length; i++) {
                    recentSearch = new RecentSearch(plainRecentSearches[i]._userId, plainRecentSearches[i]._searchString);
                    convertedRecentSearches.push(recentSearch);
                }
                this._recentSearchesCache = convertedRecentSearches;
            }
        }
        return this._recentSearchesCache;
    },
    set recentSearches(recentSearches) {
        PropertyDAO.set(PropertyDAO.PROP_RECENT_SEARCHES, recentSearches);
        this._recentSearchesCache = recentSearches;
    },
    addRecentSearch: function (aUserId, aHomeSite, aRecentSearch) {
        var that = this;
        var parameters;
        var callback = function (aResult) {
            if (aResult) {
                that.getRecentSearches(aUserId, aHomeSite);
            }
        };
        parameters = '{"last_queries_used": [{"keywords": ["' + aRecentSearch +
            '"], "spellcheck": false,"recallCount": 0, "department": "Department",' +
            ' "productType": "-1", "aisle": "aisle1","categoryId": 0, "aspects": []' +
            '} ]}';
        MEDSApi.addRecentSearch(aHomeSite, parameters, callback);
    },
    getRecentSearches: function (aUserId, aHomeSite) {
        var that = this;
        var callback = function (aResult) {
            if (aResult && aResult.attributes) {
                var lastQueriesUsed = null;
                var searchString = null;
                var recentSearch;
                var recentSearches = [];
                $.each(aResult.attributes, function (aIndex, aValue) {
                    if ("last_queries_used" == aValue.attributeName) {
                        lastQueriesUsed = aValue.attributeValue.last_queries_used;
                        if (lastQueriesUsed) {
                            $.each(lastQueriesUsed, function (aQueryIndex, aQueryValue) {
                                if (aQueryValue.keywords[0]) {
                                    searchString = aQueryValue.keywords[0];
                                    recentSearch = new RecentSearch(aUserId, searchString);
                                    recentSearches.push(recentSearch);
                                }
                            });
                        }
                    }
                });
                that.recentSearches = recentSearches;
            }
            ObserverHelper.notify(Topics.RECENT_SEARCHES_UPDATED);
        };
        MEDSApi.getRecentSearches(aHomeSite, {}, callback);
    },
    clearRecentSearches: function (aHomeSite, aDeleteFromApi) {
        this.recentSearches = [];
        var callback = function (aResult) {
            if (aResult) {
                ObserverHelper.notify(Topics.RECENT_SEARCHES_UPDATED);
            }
        };
        if (aDeleteFromApi) {
            MEDSApi.clearRecentSearches(aHomeSite, {}, callback);
        }
    },
    observe: function (aTopic, aData) {
        var userId;
        var homeSite;
        switch (aTopic) {
            case Topics.ACCOUNT_SIGNED_IN:
                var account = Account.getAccount();
                userId = account.get("userId");
                homeSite = aData.homeSite;
                this.getRecentSearches(userId, homeSite);
                break;
            case Topics.ACCOUNT_SIGNED_OUT:
                this.clearRecentSearches(null, false);
                break;
        }
    }
};
(function () { this.init(); }).apply(RecentSearchMedsService);
//# sourceMappingURL=data:application/json;base64,