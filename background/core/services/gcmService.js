/*!
 * Copyright (C) 2007-2015 eBay Inc. All Rights Reserved.
 */
var GCMService = {
    _deviceToken: null,
    _debugMessagesArray: null,
    _retryTimer: null,
    _RETRY_TIMER_INTERVAL: 5 * 1000,
    _RETRY_ATTEMPTS_LIMIT: 5,
    _retryCount: 0,
    init: function () {
        ObserverHelper.addObserver(this, Topics.DEBUG_MESSAGE);
        this._deviceToken = PropertyDAO.get(PropertyDAO.PROP_GCM_REGISTRATION_ID);
        this._debugMessagesArray = new Array();
        this._retryTimer = {};
        this._retryTimer.callName = null;
        this._retryTimer.timer = null;
    },
    get debugMessagesArray() {
        return this._debugMessagesArray;
    },
    _resetRetryTimer: function () {
        this._retryTimer = {};
        this._retryTimer.callName = null;
        this._retryTimer.timer = null;
        this._retryCount = 0;
    },
    stopService: function (aSignOut) {
        if (aSignOut) {
            var currentAccount = Account.getAccount();
            var token = currentAccount.get("token");
            var userId = currentAccount.get("userId");
            var siteId = Site.siteIdForSite(Site.getHomeSite());
            var globalId = Site.getGlobalId();
            var deviceId = CommonService.getInstanceIdentifier();
            var deactivateCallback = function (aResponse) {
            };
            MDNSApi.deactivateUserOnDevice(token, GCMService._deviceToken, userId, siteId, globalId, deviceId, deactivateCallback);
        }
    },
    startService: function () {
        this._gcmRegister();
    },
    _gcmRegister: function () {
        var senderId = String(ApiHelper.getEndPoint("gcmSenderId"));
        ObserverHelper.notify(Topics.DEBUG_MESSAGE, "Starting Registration Process");
        chrome.gcm.register([senderId], GCMService._registerCallback);
    },
    _registerCallback: function (regId) {
        if (chrome.runtime.lastError) {
            ObserverHelper.notify(Topics.DEBUG_MESSAGE, JSON.stringify(chrome.runtime.lastError.message));
            if (GCMService._retryCount < GCMService._RETRY_ATTEMPTS_LIMIT) {
                GCMService._retryCount++;
                GCMService._retryTimer.callName = "gcmRegister";
                GCMService._retryTimer.timer = new Timer(function () {
                    GCMService.startService();
                }, GCMService._RETRY_TIMER_INTERVAL, false);
            }
            else {
                var errorMsg = "Retry attempts limit reached for call gcmRegister";
                ObserverHelper.notify(Topics.DEBUG_MESSAGE, errorMsg);
            }
            return;
        }
        if (GCMService._retryTimer.callName == "gcmRegister") {
            GCMService._resetRetryTimer();
        }
        ObserverHelper.notify(Topics.DEBUG_MESSAGE, "Got Registration Id");
        PropertyDAO.set(PropertyDAO.PROP_GCM_REGISTRATION_ID, regId);
        GCMService._deviceToken = regId;
        var currentAccount = Account.getAccount();
        var token = currentAccount.get("token");
        var userId = currentAccount.get("userId");
        var siteId = Site.siteIdForSite(Site.getHomeSite());
        var globalId = Site.getGlobalId();
        var deviceId = CommonService.getInstanceIdentifier();
        var getSubscriptionsCallback = function (aResponse) {
            if (PropertyDAO.get(PropertyDAO.PROP_DISPLAY_LOGS)) {
                console.log("GCM subscriptions callback");
                console.log(aResponse);
            }
            if (!aResponse.errors) {
                if (GCMService._retryTimer.callName == "getDeviceNotificationSubscriptions") {
                    GCMService._resetRetryTimer();
                }
                if (aResponse.subscriptions === 0) {
                    ObserverHelper.notify(Topics.DEBUG_MESSAGE, "User not subscribed, subscribing");
                    MDNSApi.setDeviceNotificationSubscriptions(token, GCMService._deviceToken, userId, siteId, globalId, deviceId, GCMService.setDeviceNotificationSubscriptionsCallback);
                }
                else {
                    if (!aResponse.active) {
                        ObserverHelper.notify(Topics.DEBUG_MESSAGE, "User subscribed but inactive, activating");
                        MDNSApi.activateUserOnDevice(token, GCMService._deviceToken, userId, siteId, globalId, deviceId, GCMService.activateUserOnDeviceCallback);
                    }
                    else {
                        ObserverHelper.notify(Topics.DEBUG_MESSAGE, "User was already active, nothing to do");
                    }
                }
            }
            else {
                if (GCMService._retryCount < GCMService._RETRY_ATTEMPTS_LIMIT) {
                    GCMService._retryCount++;
                    GCMService._retryTimer.callName = "getDeviceNotificationSubscriptions";
                    GCMService._retryTimer.timer = new Timer(function () {
                        MDNSApi.getDeviceNotificationSubscriptions(token, GCMService._deviceToken, userId, siteId, globalId, deviceId, getSubscriptionsCallback);
                    }, GCMService._RETRY_TIMER_INTERVAL, false);
                }
                else {
                    var errorMsg = "Retry attempts limit reached for call getDeviceNotificationSubscriptions";
                    ObserverHelper.notify(Topics.DEBUG_MESSAGE, errorMsg);
                }
            }
        };
        MDNSApi.getDeviceNotificationSubscriptions(token, GCMService._deviceToken, userId, siteId, globalId, deviceId, getSubscriptionsCallback);
    },
    setDeviceNotificationSubscriptionsCallback: function (aResult) {
        if (aResult.errors) {
            if (GCMService._retryCount < GCMService._RETRY_ATTEMPTS_LIMIT) {
                GCMService._retryCount++;
                GCMService._retryTimer.callName = "setDeviceNotificationSubscriptions";
                GCMService._retryTimer.timer = new Timer(function () {
                    GCMService.startService();
                }, GCMService._RETRY_TIMER_INTERVAL, false);
            }
            else {
                var errorMsg = "Retry attempts limit reached for call setDeviceNotificationSubscriptions";
                ObserverHelper.notify(Topics.DEBUG_MESSAGE, errorMsg);
            }
        }
        else {
            GCMService._resetRetryTimer();
            ObserverHelper.notify(Topics.DEBUG_MESSAGE, "User subscribed successfully");
        }
    },
    activateUserOnDeviceCallback: function (aResult) {
        if (aResult.errors) {
            if (GCMService._retryCount < GCMService._RETRY_ATTEMPTS_LIMIT) {
                GCMService._retryCount++;
                GCMService._retryTimer.callName = "activateUserOnDevice";
                GCMService._retryTimer.timer = new Timer(function () {
                    GCMService.startService();
                }, GCMService._RETRY_TIMER_INTERVAL, false);
            }
            else {
                var errorMsg = "Retry attempts limit reached for call activateUserOnDevice";
                ObserverHelper.notify(Topics.DEBUG_MESSAGE, errorMsg);
            }
        }
        else {
            GCMService._resetRetryTimer();
            ObserverHelper.notify(Topics.DEBUG_MESSAGE, "User activated successfully");
        }
    },
    _addDebugMsg: function (aData) {
        GCMService._debugMessagesArray.push(aData);
    },
    observe: function (aTopic, aData) {
        switch (aTopic) {
            case Topics.DEBUG_MESSAGE:
                this._addDebugMsg(aData);
                break;
        }
    }
};
(function () { this.init(); }).apply(GCMService);
//# sourceMappingURL=data:application/json;base64,