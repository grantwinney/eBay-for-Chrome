/*!
 * Copyright (C) 2007-2015 eBay Inc. All Rights Reserved.
 */
var SymbanService = {
    _TYPE_READ: "READ",
    _TYPE_NEW: "NEW",
    init: function () {
        ObserverHelper.addObserver(this, Topics.ACCOUNT_SIGNED_IN);
        ObserverHelper.addObserver(this, Topics.ACCOUNT_SIGNED_OUT);
    },
    get userData() {
        return PropertyDAO.get(PropertyDAO.PROP_SYMBAN_DATA);
    },
    get isUpdatingData() {
        return PropertyDAO.get(PropertyDAO.PROP_SYMBAN_DATA_UPDATING);
    },
    _clearSymbanCache: function () {
        PropertyDAO.remove(PropertyDAO.PROP_SYMBAN_DATA);
        PropertyDAO.set(PropertyDAO.PROP_SYMBAN_DATA_UPDATING, false);
        ObserverHelper.notify(Topics.SYMBAN_DATA_REMOVED);
    },
    _lastRetrievalTime: function (aDate) {
        var lastRetrievalTime;
        var dateFormat = "YYYY-MM-DDThh:mm:ss.000Z";
        if (aDate) {
            lastRetrievalTime = aDate;
        }
        else {
            lastRetrievalTime = UtilityHelper.formatDate($.now(), dateFormat);
        }
        return { value: lastRetrievalTime };
    },
    getSymbanData: function (aApiPath) {
        var that = this;
        var badgeCount = 0;
        var params = {};
        var localCallback = function (aResponse) {
            if (aResponse) {
                that.processNotificationsData(aResponse);
                if ("undefined" != typeof (aResponse.badgeCount)) {
                    badgeCount = aResponse.badgeCount;
                }
                ObserverHelper.notify(Topics.UPDATE_BROWSER_ACTION_BADGE, { newMessages: badgeCount });
            }
            PropertyDAO.set(PropertyDAO.PROP_SYMBAN_DATA_UPDATING, false);
            ObserverHelper.notify(Topics.SYMBAN_DATA_UPDATED);
            if (badgeCount > 0) {
                PropertyDAO.set(PropertyDAO.PROP_DEFAULT_TAB, "tab-notification");
            }
        };
        if (aApiPath) {
            params.apiPath = aApiPath;
        }
        if (!PropertyDAO.get(PropertyDAO.PROP_SYMBAN_DATA_UPDATING)) {
            PropertyDAO.set(PropertyDAO.PROP_SYMBAN_DATA_UPDATING, true);
            ObserverHelper.notify(Topics.SYMBAN_DATA_UPDATING);
        }
        SymbanApi.callSymbanApi(SymbanApi.REQUEST_TYPES.PULL, params, localCallback);
    },
    processNotificationsData: function (aData) {
        var badgeCount;
        var notifications;
        var latestNotificationTime;
        var total;
        var notificationId = null;
        var symbanData = {
            badgeCount: 0,
            notifications: {},
            latestNotificationTime: {},
            total: 0,
            prev: null,
            next: null,
            loaded: false
        };
        badgeCount = aData.badgeCount;
        notifications = aData.notifications;
        latestNotificationTime = aData.latestNotificationTime;
        total = aData.total;
        prev = aData.prev;
        next = aData.next;
        if ("undefined" != typeof (notifications)) {
            $.each(notifications, function (aIndex, aNotification) {
                notificationId = aNotification.notificationId;
                if ("undefined" != typeof (notificationId)) {
                    aNotification.notificationURL =
                        ZoomService.getZoomImageforUrl(aNotification.notificationURL, 150);
                    symbanData.notifications[notificationId] = aNotification;
                }
            });
        }
        if ("undefined" != typeof (badgeCount)) {
            symbanData.badgeCount = badgeCount;
        }
        if ("undefined" != typeof (latestNotificationTime)) {
            symbanData.latestNotificationTime = latestNotificationTime;
        }
        if ("undefined" != typeof (total)) {
            symbanData.total = total;
        }
        if ("undefined" != typeof (prev)) {
            symbanData.prev = prev;
        }
        else {
            symbanData.prev = null;
        }
        if ("undefined" != typeof (next)) {
            symbanData.next = next;
        }
        else {
            symbanData.next = null;
        }
        symbanData.loaded = true;
        PropertyDAO.set(PropertyDAO.PROP_SYMBAN_DATA, symbanData);
    },
    markNotificationAsRead: function (aNotificationId) {
        var params;
        var symbanData = PropertyDAO.get(PropertyDAO.PROP_SYMBAN_DATA);
        var notification = symbanData.notifications[aNotificationId];
        if ("undefined" != typeof (notification)) {
            symbanData.badgeCount -= 1;
            if (notification.status == this._TYPE_NEW) {
                notification.status = this._TYPE_READ;
            }
            ObserverHelper.notify(Topics.UPDATE_BROWSER_ACTION_BADGE, { newMessages: symbanData.badgeCount });
            params = {
                notificationId: aNotificationId,
                type: SymbanApi.UPDATES.READ,
                lastRetrievalTime: this._lastRetrievalTime(this.userData.latestNotificationTime.value)
            };
            PropertyDAO.set(PropertyDAO.PROP_SYMBAN_DATA, symbanData);
            SymbanApi.callSymbanApi(SymbanApi.REQUEST_TYPES.UPDATE, params);
        }
    },
    markAllNotificationsAsRead: function () {
        var params;
        var that = this;
        var symbanData = PropertyDAO.get(PropertyDAO.PROP_SYMBAN_DATA);
        var localCallback = function (aResponse) {
            if (aResponse) {
                symbanData.badgeCount = 0;
                $.each(symbanData.notifications, function (aIndex, aNotification) {
                    if (aNotification.status == that._TYPE_NEW) {
                        aNotification.status = that._TYPE_READ;
                    }
                });
                PropertyDAO.set(PropertyDAO.PROP_SYMBAN_DATA, symbanData);
                ObserverHelper.notify(Topics.SYMBAN_DATA_UPDATED);
                ObserverHelper.notify(Topics.UPDATE_BROWSER_ACTION_BADGE, { newMessages: 0 });
            }
        };
        params = {
            type: SymbanApi.UPDATES.READ_ALL,
            lastRetrievalTime: this._lastRetrievalTime(this.userData.latestNotificationTime.value)
        };
        SymbanApi.callSymbanApi(SymbanApi.REQUEST_TYPES.UPDATE, params, localCallback);
    },
    removeNotification: function (aNotificationId) {
        var params;
        var symbanData = PropertyDAO.get(PropertyDAO.PROP_SYMBAN_DATA);
        var localCallback = function (aResponse) {
            if (aResponse) {
                var notification = symbanData.notifications[aNotificationId];
                if ("undefined" != typeof (notification)) {
                    delete symbanData.notifications[aNotificationId];
                    symbanData.badgeCount -= 1;
                    PropertyDAO.set(PropertyDAO.PROP_SYMBAN_DATA, symbanData);
                    ObserverHelper.notify(Topics.UPDATE_BROWSER_ACTION_BADGE, { newMessages: symbanData.badgeCount });
                }
                ObserverHelper.notify(Topics.SYMBAN_DATA_UPDATED);
            }
        };
        params = {
            notificationId: aNotificationId,
            type: SymbanApi.UPDATES.DELETE,
            lastRetrievalTime: this._lastRetrievalTime(this.userData.latestNotificationTime.value)
        };
        SymbanApi.callSymbanApi(SymbanApi.REQUEST_TYPES.UPDATE, params, localCallback);
    },
    getBadgeCount: function () {
        var params = {};
        var badgeCount = 0;
        var localCallback = function (aResponse) {
            if (aResponse) {
                if ("undefined" != typeof (aResponse.badgeCount)) {
                    badgeCount = aResponse.badgeCount;
                }
                ObserverHelper.notify(Topics.UPDATE_BROWSER_ACTION_BADGE, { newMessages: badgeCount });
            }
        };
        params.badgeCountOnly = true;
        SymbanApi.callSymbanApi(SymbanApi.REQUEST_TYPES.PULL, params, localCallback);
    },
    observe: function (aTopic, aData) {
        switch (aTopic) {
            case Topics.ACCOUNT_SIGNED_OUT:
                this._clearSymbanCache();
                break;
        }
    }
};
(function () { this.init(); }).apply(SymbanService);
//# sourceMappingURL=data:application/json;base64,