/*!
 * Copyright (C) 2007-2015 eBay Inc. All Rights Reserved.
 */
var AddressBook = ebay.apis.addressBook;
var Trading = ebay.apis.trading;
var AccountService = {
    _activeAccount: null,
    _loginSessionId: null,
    isUpdatingData: false,
    get activeAccount() {
        if (this._activeAccount === null) {
            this._activeAccount = Account.getAccount();
            Store.dispatch(addAccount(this._activeAccount));
        }
        return this._activeAccount;
    },
    _init: function () {
        ObserverHelper.addObserver(this, Topics.FORCE_ACCOUNT_SIGN_OUT);
        ObserverHelper.addObserver(this, Topics.USER_TOKEN_EXPIRED);
    },
    setUserToken: function (aToken, aCallback) {
        var eventTracker = new EventTracker("Sign In");
        var gotToken = eventTracker.addCallbackEvent();
        var updatedAccount = eventTracker.addCallbackEvent();
        var that = this;
        eventTracker.doWhenAllFinished(aCallback);
        var accountUpdateCallback = function (aNumErrors) {
            that._signedIn();
            updatedAccount();
        };
        var tokenCallback = function (aToken) {
            try {
                var token = aToken;
                if (!token || token === "") {
                    Logger.error("FetchToken returned an empty token (oauth); sign in aborted");
                    return;
                }
                gotToken();
                var getUsername = function (aResult) {
                    if (!aResult.message) {
                        that._activeAccount = new Account(aResult);
                        that._activeAccount.set("token", token);
                        that._activeAccount.set("registrationSite", Site.getHomeSite());
                        that._activeAccount.set("feedbackRating", 0);
                        that._activeAccount.set("numUnreadMessages", 0);
                        Store.dispatch(addAccount(that._activeAccount));
                        that.updateAccount(that._activeAccount.get("userId"), that._activeAccount.get("token"), accountUpdateCallback);
                    }
                };
                var authConfig = {
                    endPoint: ApiHelper.getEndPoint("tradingApi"),
                    extVersion: BrowserHelper.getExtensionVersion(),
                    requestIdentifier: CommonService.getRequestIdentifier(),
                    siteId: Site.siteIdForSite(Site.getHomeSite()),
                    token: { access_token: aToken }
                };
                Trading.getUsername(authConfig)
                    .then(getUsername)
                    .catch(function (reason) {
                    console.log(reason);
                });
            }
            catch (e) {
                Logger.error("AccountService.setUserToken.tokenCallback Error: " + e.message);
            }
        };
        ObserverHelper.notify(Topics.ACCOUNT_SIGNING_IN, null);
        tokenCallback(aToken);
    },
    _signedIn: function () {
        if (PropertyDAO.get(PropertyDAO.PROP_FIRST_SIGNIN)) {
            EventAnalytics.push({ key: "Account", action: "SignIn" });
            RoverUrlHelper.sendTrackingRequest("activate");
        }
        else {
            EventAnalytics.push({ key: "Acquisition", action: "FirstSignIn" });
            EventAnalytics.push({ key: "Account", action: "SignIn" });
            PropertyDAO.set(PropertyDAO.PROP_FIRST_SIGNIN, true);
        }
        var that = this;
        new Timer(function () {
            ObserverHelper.notify(Topics.ACCOUNT_SIGNED_IN, { account: that._activeAccount,
                homeSite: Site.getHomeSite() });
        }, 1000);
    },
    updateAccount: function (aUserId, aToken, aCallback) {
        var that = this;
        var getUser;
        var getAddresses;
        var getUserProfileCallback;
        var siteId = Site.siteIdForSite(Site.getHomeSite());
        var eventTracker = new EventTracker("Account Update");
        eventTracker.doWhenAllFinished(function () {
            aCallback();
        });
        getUser = function (aResult) {
            if (aResult.feedbackRating != that._activeAccount.get("feedbackRating")) {
                that._activeAccount.set("feedbackRating", aResult.feedbackRating);
            }
            if (aResult.registrationSite != that._activeAccount.get("registrationSite")) {
                that._activeAccount.set("registrationSite", aResult.registrationSite);
            }
            if (aResult.email && aResult.email.indexOf("@") != -1 &&
                aResult.email != that._activeAccount.get("email")) {
                that._activeAccount.set("email", aResult.email);
            }
            if (aResult.name &&
                aResult.name != that._activeAccount.get("name")) {
                that._activeAccount.set("name", aResult.name);
            }
        };
        var authConfig = {
            endPoint: ApiHelper.getEndPoint("tradingApi"),
            extVersion: BrowserHelper.getExtensionVersion(),
            requestIdentifier: CommonService.getRequestIdentifier(),
            siteId: Site.siteIdForSite(Site.getHomeSite()),
            token: aToken
        };
        Trading.getUser(aUserId, authConfig)
            .then(getUser)
            .catch(function (reason) {
            console.log(reason);
        });
        getAddresses = function (aResult) {
            if (!aResult || aResult.errors || !that._activeAccount) {
                eventTracker.failRemainingEvents();
                return;
            }
            for (var i = 0; i < aResult.length; i++) {
                var address = aResult[i];
                if (address.type.indexOf("Shipping") === 0 &&
                    address.status.toLowerCase() === "default") {
                    if (address.country !== that._activeAccount.get("shippingCountry")) {
                        that._activeAccount.set("shippingCountry", address.country);
                    }
                    break;
                }
            }
        };
        var site = Site.siteDataForSite(Site.getHomeSite());
        AddressBook.getAddresses(aToken, site, Configs)
            .then(getAddresses)
            .catch(function (error) {
            console.log(error);
        });
        getUserProfileCallback = function (aResult) {
            if (aResult && that._activeAccount &&
                that._activeAccount.get("avatarImage") != aResult.myWorldSmallImage) {
                var info = {};
                that._activeAccount.set("avatarImage", aResult.myWorldSmallImage);
                info.object = that._activeAccount;
                ObserverHelper.notify(Topics.ACCOUNT_AVATAR_IMAGE_CHANGED, info);
            }
        };
        eventTracker.addRequest(ShoppingApi.getUserProfile(that.activeAccount, aUserId, siteId, getUserProfileCallback));
    },
    signOut: function () {
        if (!this.activeAccount) {
            Logger.warn("Attempt to log out when there is no active account.");
            return;
        }
        this.activeAccount.delete();
        this._activeAccount = null;
        Store.dispatch(deleteAccount());
        EventAnalytics.push({ key: "Account", action: "SignOut" });
        ObserverHelper.notify(Topics.ACCOUNT_SIGNED_OUT, null);
    },
    handleUserTokenExpired: function () {
        if (AccountService._userSignOutTimer) {
            AccountService._userSignOutTimer.cancel();
            AccountService._userSignOutTimer = null;
        }
        AccountService._userSignOutTimer = new Timer(function () {
            AccountService.signOut();
        }, 3000, false);
    },
    observe: function (aTopic, aData) {
        switch (aTopic) {
            case Topics.USER_TOKEN_EXPIRED:
                this.handleUserTokenExpired();
                break;
            case Topics.FORCE_ACCOUNT_SIGN_OUT:
                this.signOut();
                break;
        }
    }
};
(function () { this._init(); }).apply(AccountService);
//# sourceMappingURL=data:application/json;base64,