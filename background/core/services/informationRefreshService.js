/*!
 * Copyright (C) 2007-2015 eBay Inc. All Rights Reserved.
 */
var InformationRefreshService = {
    _POLLING_MAX_PERIOD: 300 * 1000,
    _POLLING_MIN_PERIOD: 10 * 1000,
    _POLLING_RATIO: 0.2,
    _POST_ENDED_MIN_POLL_COUNTER_LIMIT: 3,
    _informationRefreshTimer: null,
    _postEndedMinPollCounter: null,
    init: function () {
        ObserverHelper.addObserver(this, Topics.ACCOUNT_SIGNED_IN);
        ObserverHelper.addObserver(this, Topics.ACCOUNT_SIGNED_OUT);
        ObserverHelper.addObserver(this, Topics.ITEM_ENDED);
    },
    _setInformationRefreshTimer: function () {
        var that = this;
        var timerCallback = function () {
            that.getInformationRefreshUpdate();
        };
        var getOptimalPollingCallback = function (aNewPollPeriod) {
            if (that._informationRefreshTimer) {
                that._informationRefreshTimer.cancel();
            }
            that._informationRefreshTimer = new Timer(timerCallback, aNewPollPeriod);
        };
        this._getOptimalPollingPeriodForNextUpdate(getOptimalPollingCallback);
    },
    stopInformationRefresh: function () {
        if (this._informationRefreshTimer) {
            this._informationRefreshTimer.cancel();
            delete this._informationRefreshTimer;
        }
    },
    startInformationRefresh: function () {
        this._setInformationRefreshTimer();
    },
    _getOptimalPollingPeriodForNextUpdate: function (aCallback) {
        var pollPeriod = this._POLLING_MAX_PERIOD;
        var that = this;
        var soonestEndTime = InformationRefreshService.getSoonestEndTime();
        if (soonestEndTime !== null) {
            var ebayTime = CommonService.geteBayTime().getTime();
            var timeLeft = Math.max(0, soonestEndTime - ebayTime);
            pollPeriod = Math.round(timeLeft * that._POLLING_RATIO);
            pollPeriod = Math.max(pollPeriod, that._POLLING_MIN_PERIOD);
            pollPeriod = Math.min(pollPeriod, that._POLLING_MAX_PERIOD);
        }
        var currentPollingPeriod = that._POLLING_MAX_PERIOD;
        if (that._informationRefreshTimer) {
            currentPollingPeriod = that._informationRefreshTimer.interval;
            if (currentPollingPeriod == that._POLLING_MIN_PERIOD &&
                pollPeriod == that._POLLING_MAX_PERIOD) {
                if (that._postEndedMinPollCounter === null) {
                    that._postEndedMinPollCounter = 1;
                }
                else {
                    that._postEndedMinPollCounter = that._postEndedMinPollCounter + 1;
                    if (that._postEndedMinPollCounter > that._POST_ENDED_MIN_POLL_COUNTER_LIMIT) {
                        that._postEndedMinPollCounter = null;
                    }
                }
                if (that._postEndedMinPollCounter !== null) {
                    pollPeriod = that._POLLING_MIN_PERIOD;
                }
            }
        }
        aCallback(pollPeriod);
    },
    getInformationRefreshUpdate: function () {
        if (!SymbanService.isUpdatingData) {
            SymbanService.getBadgeCount();
        }
        var that = this;
        that._setInformationRefreshTimer();
    },
    getSoonestEndTime: function () {
        var soonestEndTime = null;
        var endTime = null;
        var currentList;
        var listNames = [];
        listNames.push(TradingApi.WATCH_LIST);
        listNames.push(TradingApi.BID_LIST);
        listNames.push(TradingApi.BEST_OFFER_LIST);
        listNames.push(TradingApi.ACTIVE_LIST);
        listNames.push(TradingApi.SELLING_OFFER_LIST);
        $.each(listNames, function (aIndex, aListName) {
            currentList = MyEbayService.getList(aListName);
            $.each(currentList, function (aIndex, aItem) {
                if (aItem.get("endTime") && !aItem.isEnded() &&
                    aItem.get("endTime") > CommonService.geteBayTime().getTime()) {
                    endTime = aItem.get("endTime");
                    if (0 < endTime && (!soonestEndTime || endTime < soonestEndTime)) {
                        soonestEndTime = endTime;
                    }
                }
            });
        });
        return soonestEndTime;
    },
    observe: function (aTopic, aData) {
        switch (aTopic) {
            case Topics.ACCOUNT_SIGNED_IN:
                if (Configs.BROWSER !== "cr") {
                    InformationRefreshService.startInformationRefresh();
                }
                break;
            case Topics.ACCOUNT_SIGNED_OUT:
                if (Configs.BROWSER !== "cr") {
                    InformationRefreshService.stopInformationRefresh();
                }
                break;
            case Topics.ITEM_ENDED:
                MyEbayService.updateItemEnded(aData);
                break;
        }
    }
};
(function () { this.init(); }).apply(InformationRefreshService);
//# sourceMappingURL=data:application/json;base64,